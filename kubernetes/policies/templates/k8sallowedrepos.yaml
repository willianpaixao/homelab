apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8sallowedrepos
  annotations:
    description: Restricts container image registries to an allowed set
spec:
  crd:
    spec:
      names:
        kind: K8sAllowedRepos
      validation:
        openAPIV3Schema:
          type: object
          properties:
            repos:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8sallowedrepos

        violation[{"msg": msg}] {
          container := input_containers[_]
          satisfied := [repo | repo = input.parameters.repos[_] ; startswith(container.image, repo)]
          count(satisfied) == 0
          msg := sprintf("container <%v> has an invalid image registry <%v>, allowed repos are %v", [container.name, container.image, input.parameters.repos])
        }

        # Get containers from pods or pod templates
        input_containers[container] {
          # Pod case
          input.review.object.kind == "Pod"
          container := input.review.object.spec.containers[_]
        }

        input_containers[container] {
          # Deployment, StatefulSet, DaemonSet case
          kinds := {"Deployment", "StatefulSet", "DaemonSet"}
          kinds[input.review.object.kind]
          container := input.review.object.spec.template.spec.containers[_]
        }

        # Also check initContainers
        input_containers[container] {
          # Pod case
          input.review.object.kind == "Pod"
          container := input.review.object.spec.initContainers[_]
        }

        input_containers[container] {
          # Deployment, StatefulSet, DaemonSet case
          kinds := {"Deployment", "StatefulSet", "DaemonSet"}
          kinds[input.review.object.kind]
          container := input.review.object.spec.template.spec.initContainers[_]
        }
