apiVersion: templates.gatekeeper.sh/v1
kind: ConstraintTemplate
metadata:
  name: k8snosecretsinenv
  annotations:
    description: Prohibits use of secrets as environment variables
spec:
  crd:
    spec:
      names:
        kind: K8sNoSecretsInEnv
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8snosecretsinenv

        violation[{"msg": msg}] {
          container := input_containers[_]
          env := container.env[_]
          env.valueFrom.secretKeyRef
          msg := sprintf("container <%v> in pod <%v> has a secret in env variable <%v>, use secretVolumes instead", [container.name, input.review.object.metadata.name, env.name])
        }

        violation[{"msg": msg}] {
          container := input_containers[_]
          envFrom := container.envFrom[_]
          envFrom.secretRef
          msg := sprintf("container <%v> in pod <%v> has all secrets from <%v> as env variables, use secretVolumes instead", [container.name, input.review.object.metadata.name, envFrom.secretRef.name])
        }

        # Get containers from pods or pod templates
        input_containers[container] {
          # Pod case
          input.review.object.kind == "Pod"
          container := input.review.object.spec.containers[_]
        }

        input_containers[container] {
          # Deployment, StatefulSet, DaemonSet case
          kinds := {"Deployment", "StatefulSet", "DaemonSet"}
          kinds[input.review.object.kind]
          container := input.review.object.spec.template.spec.containers[_]
        }
