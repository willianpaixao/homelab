---
# yaml-language-server: $schema=https://raw.githubusercontent.com/fluxcd-community/flux2-schemas/main/helmrelease-helm-v2.json
apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: &app kube-prometheus-stack
  namespace: &namespace observability
spec:
  interval: 1h
  timeout: 30m
  chart:
    spec:
      chart: kube-prometheus-stack
      version: 66.3.0
      sourceRef:
        kind: HelmRepository
        name: prometheus-community-charts
        namespace: flux-system
  install:
    crds: CreateReplace
    remediation:
      retries: 3
  upgrade:
    cleanupOnFail: true
    crds: CreateReplace
    remediation:
      strategy: rollback
      retries: 3
  values:
    alertmanager:
      ingress:
        enabled: true
        pathType: Prefix
        ingressClassName: internal
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Monitoring
          gethomepage.dev/icon: alertmanager.png
          gethomepage.dev/name: Alertmanager
          gethomepage.dev/app: alertmanager
        hosts:
          - &host alertmanager.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
      alertmanagerSpec:
        replicas: 1
        alertmanagerConfiguration:
          name: alertmanager-config
    prometheus:
      service:
        type: LoadBalancer
        loadBalancerIP: 192.168.0.35
      ingress:
        enabled: true
        ingressClassName: internal
        pathType: Prefix
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/app: kube-prometheus-stack-prometheus-operator
          gethomepage.dev/group: Monitoring
          gethomepage.dev/icon: prometheus.png
          gethomepage.dev/name: Prometheus
          gethomepage.dev/widget.type: prometheus
          gethomepage.dev/widget.fields: "[\"targets_up\", \"targets_down\"]"
          gethomepage.dev/widget.url: http://kube-prometheus-stack-prometheus.observability:9090
        hosts:
          - &host prometheus.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
      serviceMonitor:
        relabelings:
          - replacement: raspberry
            targetLabel: cluster
      prometheusSpec:
        replicas: 1
        scrapeInterval: 30s
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorSelectorNilUsesHelmValues: false
        podMonitorSelectorNilUsesHelmValues: false
        probeSelectorNilUsesHelmValues: false
        scrapeConfigSelectorNilUsesHelmValues: false
        enableAdminAPI: true
        walCompression: true
        enableFeatures:
          - auto-gomaxprocs
          - memory-snapshot-on-shutdown
          - new-service-discovery-manager
        enableRemoteWriteReceiver: true
        retention: 30d
        retentionSize: 64GiB
        nodeSelector:
          disktype: ssd
        storageSpec:
          volumeClaimTemplate:
            spec:
              storageClassName: longhorn
              resources:
                requests:
                  storage: 64Gi
    kubeApiServer:
      serviceMonitor:
        metricRelabelings:
          - sourceLabels: [__name__]
            action: drop
            regex: '(apiserver|etcd)_request_duration_seconds_bucket'
        relabelings:
          - replacement: raspberry
            targetLabel: cluster
    kubelet:
      serviceMonitor:
        cAdvisorRelabelings:
          - sourceLabels: [__metrics_path__]
            targetLabel: metrics_path
          - replacement: raspberry
            targetLabel: cluster
        relabelings:
          - sourceLabels: [__metrics_path__]
            targetLabel: metrics_path
          - replacement: raspberry
            targetLabel: cluster
    kubeControllerManager:
      enabled: false
    kubeScheduler:
      enabled: false
    kubeProxy:
      enabled: false
    kube-state-metrics:
      prometheus:
        monitor:
          relabelings:
            - replacement: raspberry
              targetLabel: cluster
    prometheus-node-exporter:
      prometheus:
        monitor:
          relabelings:
            - replacement: raspberry
              targetLabel: cluster
    prometheusOperator:
      serviceMonitor:
        relabelings:
          - replacement: raspberry
            targetLabel: cluster
    grafana:
      enabled: true
      defaultDashboardsTimezone: ${TIMEZONE}
      ingress:
        enabled: true
        annotations:
          gethomepage.dev/enabled: "true"
          gethomepage.dev/group: Monitoring
          gethomepage.dev/icon: grafana.png
          gethomepage.dev/name: Grafana
        hosts:
          - &host grafana.${SECRET_DOMAIN}
        tls:
          - hosts:
              - *host
      sidecar:
        dashboards:
          multicluster:
            global:
              enabled: true
      persistence:
        enabled: true
        storageClassName: longhorn
        accessModes:
          - ReadWriteOnce
        size: 8Gi
        labels:
          recurring-job-group.longhorn.io/backup: enabled
      nodeSelector:
        disktype: ssd
